
Zavrsni Rad 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042fc  080042fc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000001c  08004320  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004320  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010714  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002103  00000000  00000000  000307a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  000328a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9a  00000000  00000000  00033890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022219  00000000  00000000  0003452a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f25  00000000  00000000  00056743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d305c  00000000  00000000  00069668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004448  00000000  00000000  0013c6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00140b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800422c 	.word	0x0800422c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	0800422c 	.word	0x0800422c

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HD44780_Init>:
		    0b00000
};

// Inicijalizira LCD prikaz
void HD44780_Init(uint8_t rows)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    dpRows = rows;                  // Pohranjuje broj redaka LCD-a
 800051e:	4a38      	ldr	r2, [pc, #224]	; (8000600 <HD44780_Init+0xec>)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	7013      	strb	r3, [r2, #0]
    dpBacklight = LCD_BACKLIGHT;    // Postavlja pozadinsko osvjetljenje
 8000524:	4b37      	ldr	r3, [pc, #220]	; (8000604 <HD44780_Init+0xf0>)
 8000526:	2208      	movs	r2, #8
 8000528:	701a      	strb	r2, [r3, #0]

    // Postavlja funkcionalne postavke LCD-a
    dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800052a:	4b37      	ldr	r3, [pc, #220]	; (8000608 <HD44780_Init+0xf4>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
    if (dpRows > 1)
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <HD44780_Init+0xec>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d907      	bls.n	8000548 <HD44780_Init+0x34>
    {
        dpFunction |= LCD_2LINE;  // Ako LCD ima više od jednog retka, postavlja 2 retka
 8000538:	4b33      	ldr	r3, [pc, #204]	; (8000608 <HD44780_Init+0xf4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b31      	ldr	r3, [pc, #196]	; (8000608 <HD44780_Init+0xf4>)
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e006      	b.n	8000556 <HD44780_Init+0x42>
    }
    else
    {
        dpFunction |= LCD_5x10DOTS; // Inače, postavlja 5x10 točaka
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <HD44780_Init+0xf4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b2d      	ldr	r3, [pc, #180]	; (8000608 <HD44780_Init+0xf4>)
 8000554:	701a      	strb	r2, [r3, #0]
    }

    DelayInit();    // Inicijalizira odgode
 8000556:	f000 f99f 	bl	8000898 <DelayInit>
    HAL_Delay(50);  // Čeka 50 ms
 800055a:	2032      	movs	r0, #50	; 0x32
 800055c:	f001 f8e6 	bl	800172c <HAL_Delay>

    ExpanderWrite(dpBacklight); // Uključuje pozadinsko osvjetljenje
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <HD44780_Init+0xf0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f95d 	bl	8000824 <ExpanderWrite>
    HAL_Delay(1000);            // Čeka 1 sekundu
 800056a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056e:	f001 f8dd 	bl	800172c <HAL_Delay>

    // Inicijalizacija LCD-a u 4-bitnom modu
    Write4Bits(0x03 << 4);
 8000572:	2030      	movs	r0, #48	; 0x30
 8000574:	f000 f945 	bl	8000802 <Write4Bits>
    DelayUS(4500);
 8000578:	f241 1094 	movw	r0, #4500	; 0x1194
 800057c:	f000 f9b6 	bl	80008ec <DelayUS>
    Write4Bits(0x03 << 4);
 8000580:	2030      	movs	r0, #48	; 0x30
 8000582:	f000 f93e 	bl	8000802 <Write4Bits>
    DelayUS(4500);
 8000586:	f241 1094 	movw	r0, #4500	; 0x1194
 800058a:	f000 f9af 	bl	80008ec <DelayUS>
    Write4Bits(0x03 << 4);
 800058e:	2030      	movs	r0, #48	; 0x30
 8000590:	f000 f937 	bl	8000802 <Write4Bits>
    DelayUS(4500);
 8000594:	f241 1094 	movw	r0, #4500	; 0x1194
 8000598:	f000 f9a8 	bl	80008ec <DelayUS>
    Write4Bits(0x02 << 4);
 800059c:	2020      	movs	r0, #32
 800059e:	f000 f930 	bl	8000802 <Write4Bits>
    DelayUS(100);
 80005a2:	2064      	movs	r0, #100	; 0x64
 80005a4:	f000 f9a2 	bl	80008ec <DelayUS>

    SendCommand(LCD_FUNCTIONSET | dpFunction); // Postavlja funkcionalne postavke LCD-a
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HD44780_Init+0xf4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f043 0320 	orr.w	r3, r3, #32
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f8e8 	bl	8000788 <SendCommand>
    dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF; // Postavlja kontrolu prikaza
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <HD44780_Init+0xf8>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	701a      	strb	r2, [r3, #0]
    HD44780_Display();   // Uključuje prikaz
 80005be:	f000 f875 	bl	80006ac <HD44780_Display>
    HD44780_Clear();     // Čisti ekran
 80005c2:	f000 f82b 	bl	800061c <HD44780_Clear>

    dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT; // Postavlja način unosa
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HD44780_Init+0xfc>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	701a      	strb	r2, [r3, #0]
    SendCommand(LCD_ENTRYMODESET | dpMode);
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HD44780_Init+0xfc>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f8d6 	bl	8000788 <SendCommand>
    DelayUS(4500);
 80005dc:	f241 1094 	movw	r0, #4500	; 0x1194
 80005e0:	f000 f984 	bl	80008ec <DelayUS>

    // Kreira i učitava posebne znakove
    HD44780_CreateSpecialChar(0, special1);
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <HD44780_Init+0x100>)
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 f876 	bl	80006d8 <HD44780_CreateSpecialChar>
    HD44780_CreateSpecialChar(1, special2);
 80005ec:	490a      	ldr	r1, [pc, #40]	; (8000618 <HD44780_Init+0x104>)
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 f872 	bl	80006d8 <HD44780_CreateSpecialChar>
    HD44780_Home();  // Postavlja kursor na početnu poziciju
 80005f4:	f000 f81d 	bl	8000632 <HD44780_Home>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000003b 	.word	0x2000003b
 8000604:	2000003c 	.word	0x2000003c
 8000608:	20000038 	.word	0x20000038
 800060c:	20000039 	.word	0x20000039
 8000610:	2000003a 	.word	0x2000003a
 8000614:	20000000 	.word	0x20000000
 8000618:	20000008 	.word	0x20000008

0800061c <HD44780_Clear>:

// Briše sadržaj LCD-a
void HD44780_Clear(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    SendCommand(LCD_CLEARDISPLAY);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f8b1 	bl	8000788 <SendCommand>
    DelayUS(2000);  // Čeka 2 ms da se operacija završi
 8000626:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800062a:	f000 f95f 	bl	80008ec <DelayUS>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <HD44780_Home>:

// Vraća kursor na početnu poziciju
void HD44780_Home(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
    SendCommand(LCD_RETURNHOME);
 8000636:	2002      	movs	r0, #2
 8000638:	f000 f8a6 	bl	8000788 <SendCommand>
    DelayUS(2000);  // Čeka 2 ms da se operacija završi
 800063c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000640:	f000 f954 	bl	80008ec <DelayUS>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <HD44780_SetCursor>:

// Postavlja kursor na određenu poziciju
void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 }; // Offseti za retke
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HD44780_SetCursor+0x5c>)
 800065a:	f107 0408 	add.w	r4, r7, #8
 800065e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (row >= dpRows)
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HD44780_SetCursor+0x60>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	79ba      	ldrb	r2, [r7, #6]
 800066a:	429a      	cmp	r2, r3
 800066c:	d303      	bcc.n	8000676 <HD44780_SetCursor+0x2e>
    {
        row = dpRows - 1; // Ako je redak veći od broja redaka, postavi na zadnji redak
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HD44780_SetCursor+0x60>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3b01      	subs	r3, #1
 8000674:	71bb      	strb	r3, [r7, #6]
    }
    SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row])); // Postavlja adresu u DDRAM
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	3318      	adds	r3, #24
 800067c:	443b      	add	r3, r7
 800067e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4413      	add	r3, r2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	b25b      	sxtb	r3, r3
 800068c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000690:	b25b      	sxtb	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f877 	bl	8000788 <SendCommand>
}
 800069a:	bf00      	nop
 800069c:	371c      	adds	r7, #28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08004244 	.word	0x08004244
 80006a8:	2000003b 	.word	0x2000003b

080006ac <HD44780_Display>:
    SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

// Uključuje prikaz na LCD-u
void HD44780_Display(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    dpControl |= LCD_DISPLAYON;   // Uključuje prikaz
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <HD44780_Display+0x28>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HD44780_Display+0x28>)
 80006bc:	701a      	strb	r2, [r3, #0]
    SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HD44780_Display+0x28>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f85d 	bl	8000788 <SendCommand>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000039 	.word	0x20000039

080006d8 <HD44780_CreateSpecialChar>:
    SendCommand(LCD_ENTRYMODESET | dpMode);
}

// Kreira poseban znak na LCD-u
void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
    location &= 0x7;  // Ograničava lokaciju na raspon 0-7
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	71fb      	strb	r3, [r7, #7]
    SendCommand(LCD_SETCGRAMADDR | (location << 3));  // Postavlja adresu u CGRAM
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f844 	bl	8000788 <SendCommand>
    for (int i = 0; i < 8; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e009      	b.n	800071a <HD44780_CreateSpecialChar+0x42>
    {
        SendChar(charmap[i]);  // Učitava svaki redak posebnog znaka
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f848 	bl	80007a4 <SendChar>
    for (int i = 0; i < 8; i++)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	2b07      	cmp	r3, #7
 800071e:	ddf2      	ble.n	8000706 <HD44780_CreateSpecialChar+0x2e>
    }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HD44780_PrintSpecialChar>:

// Ispisuje poseban znak na LCD-u
void HD44780_PrintSpecialChar(uint8_t index)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
    SendChar(index);  // Ispisuje znak prema indeksu
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f834 	bl	80007a4 <SendChar>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <HD44780_PrintStr>:
    HD44780_CreateSpecialChar(char_num, rows);
}

// Ispisuje niz znakova na LCD-u
void HD44780_PrintStr(const char c[])
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    while (*c)
 800074c:	e006      	b.n	800075c <HD44780_PrintStr+0x18>
    {
        SendChar(*c++);  // Ispisuje svaki znak niza
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f824 	bl	80007a4 <SendChar>
    while (*c)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f4      	bne.n	800074e <HD44780_PrintStr+0xa>
    }
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HD44780_PrintChar>:

// Ispisuje jedan znak na LCD-u
void HD44780_PrintChar(char c)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
    SendChar(c);  // Ispisuje znak
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f812 	bl	80007a4 <SendChar>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SendCommand>:
    ExpanderWrite(0);  // Šalje komandu za uključivanje osvjetljenja
}

// Šalje komandu na LCD
static void SendCommand(uint8_t cmd)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
    Send(cmd, 0);  // Poziva funkciju za slanje komande bez RS signala
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f812 	bl	80007c0 <Send>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SendChar>:

// Šalje znak na LCD
static void SendChar(uint8_t ch)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
    Send(ch, RS);  // Poziva funkciju za slanje znaka s RS signalom
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2101      	movs	r1, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f804 	bl	80007c0 <Send>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <Send>:

// Šalje podatke na LCD
static void Send(uint8_t value, uint8_t mode)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
    uint8_t highnib = value & 0xF0;  // Visoki 4 bita
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f023 030f 	bic.w	r3, r3, #15
 80007d6:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib = (value << 4) & 0xF0;  // Niski 4 bita
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	73bb      	strb	r3, [r7, #14]
    Write4Bits((highnib) | mode);  // Šalje visoki nibble s modom
 80007de:	7bfa      	ldrb	r2, [r7, #15]
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f80b 	bl	8000802 <Write4Bits>
    Write4Bits((lownib) | mode);  // Šalje niski nibble s modom
 80007ec:	7bba      	ldrb	r2, [r7, #14]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f804 	bl	8000802 <Write4Bits>
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <Write4Bits>:

// Šalje 4 bita podataka na LCD
static void Write4Bits(uint8_t value)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
    ExpanderWrite(value);  // Šalje podatke na ekspanzionu ploču
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f808 	bl	8000824 <ExpanderWrite>
    PulseEnable(value);    // Generira enable puls
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f820 	bl	800085c <PulseEnable>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <ExpanderWrite>:

// Šalje podatke na ekspanzionu ploču preko I2C-a
static void ExpanderWrite(uint8_t _data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
    uint8_t data = _data | dpBacklight;  // Dodaje stanje pozadinskog osvjetljenja
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <ExpanderWrite+0x30>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4313      	orrs	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, &data, 1, 10);  // Šalje podatke preko I2C-a
 800083a:	f107 020f 	add.w	r2, r7, #15
 800083e:	230a      	movs	r3, #10
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	214e      	movs	r1, #78	; 0x4e
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <ExpanderWrite+0x34>)
 8000848:	f001 fbb0 	bl	8001fac <HAL_I2C_Master_Transmit>
}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000003c 	.word	0x2000003c
 8000858:	20000040 	.word	0x20000040

0800085c <PulseEnable>:

// Generira enable puls za LCD
static void PulseEnable(uint8_t _data)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    ExpanderWrite(_data | ENABLE);  // Šalje enable signal
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffd8 	bl	8000824 <ExpanderWrite>
    DelayUS(20);  // Čeka 20 us
 8000874:	2014      	movs	r0, #20
 8000876:	f000 f839 	bl	80008ec <DelayUS>

    ExpanderWrite(_data & ~ENABLE);  // Onemogućava enable signal
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f023 0304 	bic.w	r3, r3, #4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffce 	bl	8000824 <ExpanderWrite>
    DelayUS(20);  // Čeka 20 us
 8000888:	2014      	movs	r0, #20
 800088a:	f000 f82f 	bl	80008ec <DelayUS>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <DelayInit>:

// Inicijalizira odgode
static void DelayInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;  // Isključuje trace
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <DelayInit+0x4c>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <DelayInit+0x4c>)
 80008a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008a6:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;   // Uključuje trace
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <DelayInit+0x4c>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <DelayInit+0x4c>)
 80008ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b2:	60d3      	str	r3, [r2, #12]

    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;  // Isključuje brojač ciklusa
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <DelayInit+0x50>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <DelayInit+0x50>)
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // Uključuje brojač ciklusa
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <DelayInit+0x50>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <DelayInit+0x50>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]

    DWT->CYCCNT = 0;  // Postavlja brojač ciklusa na nulu
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <DelayInit+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]

    __ASM volatile ("NOP");
 80008d2:	bf00      	nop
    __ASM volatile ("NOP");
 80008d4:	bf00      	nop
    __ASM volatile ("NOP");
 80008d6:	bf00      	nop
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000edf0 	.word	0xe000edf0
 80008e8:	e0001000 	.word	0xe0001000

080008ec <DelayUS>:

// Čeka određeni broj mikrosekundi
static void DelayUS(uint32_t us)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;  // Izračunava broj ciklusa za željeno vrijeme
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <DelayUS+0x44>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <DelayUS+0x48>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9a      	lsrs	r2, r3, #18
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	fb02 f303 	mul.w	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;  // Sprema trenutni broj ciklusa
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <DelayUS+0x4c>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	613b      	str	r3, [r7, #16]
    volatile uint32_t cnt;

    do
    {
        cnt = DWT->CYCCNT - start;  // Mjeri vrijeme koje je prošlo
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <DelayUS+0x4c>)
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	60fb      	str	r3, [r7, #12]
    } while (cnt < cycles);  // Čeka dok ne prođe željeno vrijeme
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	429a      	cmp	r2, r3
 800091e:	d8f6      	bhi.n	800090e <DelayUS+0x22>
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	371c      	adds	r7, #28
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000010 	.word	0x20000010
 8000934:	431bde83 	.word	0x431bde83
 8000938:	e0001000 	.word	0xe0001000

0800093c <Keypad_Scan>:
void TIM6_DAC_IRQHandler(void);
void TIM7_DAC_IRQHandler(void);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);

char Keypad_Scan(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
    char key = '\0';
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]

    // Podesi svaki stupac na nisku razinu, jedan po jedan, i provjeri dali su redovi na visokoj razini (pritisnutu tipku).
    for (int col = 0; col < 4; col++)
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	e09a      	b.n	8000a82 <Keypad_Scan+0x146>
    {
        // Postavi sve kolone na visoko stanje osim trenutne
        HAL_GPIO_WritePin(COLS_GPIO_PORT_A, COL1_PIN, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	4850      	ldr	r0, [pc, #320]	; (8000a94 <Keypad_Scan+0x158>)
 8000954:	f001 f9cc 	bl	8001cf0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL2_PIN | COL3_PIN | COL4_PIN, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800095e:	484e      	ldr	r0, [pc, #312]	; (8000a98 <Keypad_Scan+0x15c>)
 8000960:	f001 f9c6 	bl	8001cf0 <HAL_GPIO_WritePin>

        // Postavi trenutnu kolonu na nisko stanje
        switch (col)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d824      	bhi.n	80009b4 <Keypad_Scan+0x78>
 800096a:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <Keypad_Scan+0x34>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	08000981 	.word	0x08000981
 8000974:	0800098f 	.word	0x0800098f
 8000978:	0800099b 	.word	0x0800099b
 800097c:	080009a7 	.word	0x080009a7
        {
            case 0:
                HAL_GPIO_WritePin(COLS_GPIO_PORT_A, COL1_PIN, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000986:	4843      	ldr	r0, [pc, #268]	; (8000a94 <Keypad_Scan+0x158>)
 8000988:	f001 f9b2 	bl	8001cf0 <HAL_GPIO_WritePin>
                break;
 800098c:	e012      	b.n	80009b4 <Keypad_Scan+0x78>
            case 1:
                HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL2_PIN, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4841      	ldr	r0, [pc, #260]	; (8000a98 <Keypad_Scan+0x15c>)
 8000994:	f001 f9ac 	bl	8001cf0 <HAL_GPIO_WritePin>
                break;
 8000998:	e00c      	b.n	80009b4 <Keypad_Scan+0x78>
            case 2:
                HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL3_PIN, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2110      	movs	r1, #16
 800099e:	483e      	ldr	r0, [pc, #248]	; (8000a98 <Keypad_Scan+0x15c>)
 80009a0:	f001 f9a6 	bl	8001cf0 <HAL_GPIO_WritePin>
                break;
 80009a4:	e006      	b.n	80009b4 <Keypad_Scan+0x78>
            case 3:
                HAL_GPIO_WritePin(COLS_GPIO_PORT_B, COL4_PIN, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	483a      	ldr	r0, [pc, #232]	; (8000a98 <Keypad_Scan+0x15c>)
 80009ae:	f001 f99f 	bl	8001cf0 <HAL_GPIO_WritePin>
                break;
 80009b2:	bf00      	nop
        }

        // Provjeri redove za visoku razinu (pritisnuta tipka)
        if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_A, ROW1_PIN) == GPIO_PIN_RESET)
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4837      	ldr	r0, [pc, #220]	; (8000a94 <Keypad_Scan+0x158>)
 80009b8:	f001 f982 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d111      	bne.n	80009e6 <Keypad_Scan+0xaa>
        {
            key = (col == 0) ? '1' : (col == 1) ? '2' : (col == 2) ? '3' : 'A';
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00b      	beq.n	80009e0 <Keypad_Scan+0xa4>
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d006      	beq.n	80009dc <Keypad_Scan+0xa0>
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d101      	bne.n	80009d8 <Keypad_Scan+0x9c>
 80009d4:	2333      	movs	r3, #51	; 0x33
 80009d6:	e004      	b.n	80009e2 <Keypad_Scan+0xa6>
 80009d8:	2341      	movs	r3, #65	; 0x41
 80009da:	e002      	b.n	80009e2 <Keypad_Scan+0xa6>
 80009dc:	2332      	movs	r3, #50	; 0x32
 80009de:	e000      	b.n	80009e2 <Keypad_Scan+0xa6>
 80009e0:	2331      	movs	r3, #49	; 0x31
 80009e2:	71fb      	strb	r3, [r7, #7]
            break;
 80009e4:	e051      	b.n	8000a8a <Keypad_Scan+0x14e>
        }
        else if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_A, ROW2_PIN) == GPIO_PIN_RESET)
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	482a      	ldr	r0, [pc, #168]	; (8000a94 <Keypad_Scan+0x158>)
 80009ea:	f001 f969 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d111      	bne.n	8000a18 <Keypad_Scan+0xdc>
        {
            key = (col == 0) ? '4' : (col == 1) ? '5' : (col == 2) ? '6' : 'B';
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00b      	beq.n	8000a12 <Keypad_Scan+0xd6>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d006      	beq.n	8000a0e <Keypad_Scan+0xd2>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d101      	bne.n	8000a0a <Keypad_Scan+0xce>
 8000a06:	2336      	movs	r3, #54	; 0x36
 8000a08:	e004      	b.n	8000a14 <Keypad_Scan+0xd8>
 8000a0a:	2342      	movs	r3, #66	; 0x42
 8000a0c:	e002      	b.n	8000a14 <Keypad_Scan+0xd8>
 8000a0e:	2335      	movs	r3, #53	; 0x35
 8000a10:	e000      	b.n	8000a14 <Keypad_Scan+0xd8>
 8000a12:	2334      	movs	r3, #52	; 0x34
 8000a14:	71fb      	strb	r3, [r7, #7]
            break;
 8000a16:	e038      	b.n	8000a8a <Keypad_Scan+0x14e>
        }
        else if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_B, ROW3_PIN) == GPIO_PIN_RESET)
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	481f      	ldr	r0, [pc, #124]	; (8000a98 <Keypad_Scan+0x15c>)
 8000a1c:	f001 f950 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d111      	bne.n	8000a4a <Keypad_Scan+0x10e>
        {
            key = (col == 0) ? '7' : (col == 1) ? '8' : (col == 2) ? '9' : 'C';
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00b      	beq.n	8000a44 <Keypad_Scan+0x108>
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d006      	beq.n	8000a40 <Keypad_Scan+0x104>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d101      	bne.n	8000a3c <Keypad_Scan+0x100>
 8000a38:	2339      	movs	r3, #57	; 0x39
 8000a3a:	e004      	b.n	8000a46 <Keypad_Scan+0x10a>
 8000a3c:	2343      	movs	r3, #67	; 0x43
 8000a3e:	e002      	b.n	8000a46 <Keypad_Scan+0x10a>
 8000a40:	2338      	movs	r3, #56	; 0x38
 8000a42:	e000      	b.n	8000a46 <Keypad_Scan+0x10a>
 8000a44:	2337      	movs	r3, #55	; 0x37
 8000a46:	71fb      	strb	r3, [r7, #7]
            break;
 8000a48:	e01f      	b.n	8000a8a <Keypad_Scan+0x14e>
        }
        else if (HAL_GPIO_ReadPin(ROWS_GPIO_PORT_C, ROW4_PIN) == GPIO_PIN_RESET)
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <Keypad_Scan+0x160>)
 8000a4e:	f001 f937 	bl	8001cc0 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d111      	bne.n	8000a7c <Keypad_Scan+0x140>
        {
            key = (col == 0) ? '*' : (col == 1) ? '0' : (col == 2) ? '#' : 'D';
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00b      	beq.n	8000a76 <Keypad_Scan+0x13a>
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d006      	beq.n	8000a72 <Keypad_Scan+0x136>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d101      	bne.n	8000a6e <Keypad_Scan+0x132>
 8000a6a:	2323      	movs	r3, #35	; 0x23
 8000a6c:	e004      	b.n	8000a78 <Keypad_Scan+0x13c>
 8000a6e:	2344      	movs	r3, #68	; 0x44
 8000a70:	e002      	b.n	8000a78 <Keypad_Scan+0x13c>
 8000a72:	2330      	movs	r3, #48	; 0x30
 8000a74:	e000      	b.n	8000a78 <Keypad_Scan+0x13c>
 8000a76:	232a      	movs	r3, #42	; 0x2a
 8000a78:	71fb      	strb	r3, [r7, #7]
            break;
 8000a7a:	e006      	b.n	8000a8a <Keypad_Scan+0x14e>
    for (int col = 0; col < 4; col++)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	f77f af61 	ble.w	800094c <Keypad_Scan+0x10>
        }
    }

    return key;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
#define DEBOUNCE_DELAY 50 // Podešavanje maksimalnog debounce kašnjenja po potrebi
volatile uint8_t debounce_flag = 0;               // Zastavica za debouncing
volatile char debounce_key = '\0';                // 0 ako lozinka nije postavljena, 1 ako je postavljena

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    static uint32_t last_debounce_time = 0;
    static char last_key = '\0';                // Praćenje posljednje pritisnute tipke

    // Proverava da li je tajmer koji je izazvao prekid TIM6
    if (htim->Instance == TIM6)                 // Obrada TIM6 prekida
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d124      	bne.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x5c>
    {
        uint32_t current_time = HAL_GetTick();  // Dobijanje trenutnog vremena u milisekundama
 8000ab2:	f000 fe2f 	bl	8001714 <HAL_GetTick>
 8000ab6:	60f8      	str	r0, [r7, #12]

        // Proverava da li je prošlo dovoljno vremena za debouncing
        if (current_time - last_debounce_time >= DEBOUNCE_DELAY)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	2b31      	cmp	r3, #49	; 0x31
 8000ac2:	d91b      	bls.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x5c>
        {
            char key = Keypad_Scan();           // Skener za prepoznavanje pritisnute tipke
 8000ac4:	f7ff ff3a 	bl	800093c <Keypad_Scan>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	72fb      	strb	r3, [r7, #11]


            if (key != '\0')
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00e      	beq.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0x50>
            {

                if (key != last_key)            // Provjera je li tipka različita od posljednje registrirane
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	7afa      	ldrb	r2, [r7, #11]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d005      	beq.n	8000ae8 <HAL_TIM_PeriodElapsedCallback+0x48>
                {
                    debounce_key = key;         // Sprema pritisnutu tipku za dalju obradu
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ade:	7afb      	ldrb	r3, [r7, #11]
 8000ae0:	7013      	strb	r3, [r2, #0]
                    debounce_flag = 1;          // Postavljanje "zastavice" za valjani pritisak tipke
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
                }
                last_key = key;                 // Ažurira poslednju pritisnutu tipku
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	7013      	strb	r3, [r2, #0]
 8000aee:	e002      	b.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x56>
            }
            else
            {
                last_key = '\0';                // Ako nema pritisnute tipke, ponovo pokreće pritisnutu tipku
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
            }

            last_debounce_time = current_time;  // Ažurira vreme poslednjeg debouncinga
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40001000 	.word	0x40001000
 8000b08:	20000188 	.word	0x20000188
 8000b0c:	2000018c 	.word	0x2000018c
 8000b10:	2000016d 	.word	0x2000016d
 8000b14:	2000016c 	.word	0x2000016c

08000b18 <TIM7_Delay>:


void TIM7_Delay(uint16_t delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim7, 0);              // Ponovno pokretanje brojača
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <TIM7_Delay+0x34>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start(&htim7);                    // Pokretanje tajmera
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <TIM7_Delay+0x34>)
 8000b2c:	f002 fbd0 	bl	80032d0 <HAL_TIM_Base_Start>
    while(__HAL_TIM_GET_COUNTER(&htim7) < delay);  // Čekanje da prođe vrijeme kašnjenja
 8000b30:	bf00      	nop
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <TIM7_Delay+0x34>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3f9      	bcc.n	8000b32 <TIM7_Delay+0x1a>
    HAL_TIM_Base_Stop(&htim7);                     // Zaustavljanje tajmera
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <TIM7_Delay+0x34>)
 8000b40:	f002 fc2e 	bl	80033a0 <HAL_TIM_Base_Stop>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000124 	.word	0x20000124

08000b50 <main>:

uint8_t master_mode = 0;                          // Zastavica koja označava unos master lozinke
char master_input[7] = {0};                       // Dužina 6 + null terminator

int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    HAL_Init();
 8000b56:	f000 fd77 	bl	8001648 <HAL_Init>
    SystemClock_Config();
 8000b5a:	f000 f9f5 	bl	8000f48 <SystemClock_Config>
    MX_GPIO_Init();
 8000b5e:	f000 fb33 	bl	80011c8 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000b62:	f000 fb07 	bl	8001174 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8000b66:	f000 fa5d 	bl	8001024 <MX_I2C1_Init>
    MX_TIM6_Init();
 8000b6a:	f000 fa89 	bl	8001080 <MX_TIM6_Init>
    MX_TIM7_Init();
 8000b6e:	f000 fac5 	bl	80010fc <MX_TIM7_Init>


     HD44780_Init(2);              // Inicijalizacija LCD ekrana
 8000b72:	2002      	movs	r0, #2
 8000b74:	f7ff fcce 	bl	8000514 <HD44780_Init>
     HD44780_Clear();              // Čišćenje LCD ekrana
 8000b78:	f7ff fd50 	bl	800061c <HD44780_Clear>
     HD44780_SetCursor(0, 0);      // Postavljanje kursora na početak
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fd62 	bl	8000648 <HD44780_SetCursor>
     HD44780_PrintStr("Upi");      // Ispis na LCD
 8000b84:	48be      	ldr	r0, [pc, #760]	; (8000e80 <main+0x330>)
 8000b86:	f7ff fddd 	bl	8000744 <HD44780_PrintStr>
     HD44780_PrintSpecialChar(0);  // Ispis š na LCD
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fdcd 	bl	800072a <HD44780_PrintSpecialChar>
     HD44780_PrintStr("i 1. ");
 8000b90:	48bc      	ldr	r0, [pc, #752]	; (8000e84 <main+0x334>)
 8000b92:	f7ff fdd7 	bl	8000744 <HD44780_PrintStr>
     HD44780_PrintSpecialChar(0);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fdc7 	bl	800072a <HD44780_PrintSpecialChar>
     HD44780_PrintStr("ifru:");
 8000b9c:	48ba      	ldr	r0, [pc, #744]	; (8000e88 <main+0x338>)
 8000b9e:	f7ff fdd1 	bl	8000744 <HD44780_PrintStr>
     HD44780_SetCursor(0, 1);      // Postavljanje kursora u sljedeći red
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fd4f 	bl	8000648 <HD44780_SetCursor>

    HAL_TIM_Base_Start_IT(&htim6); // Pokretanje TIM6 u interrupt modu
 8000baa:	48b8      	ldr	r0, [pc, #736]	; (8000e8c <main+0x33c>)
 8000bac:	f002 fc20 	bl	80033f0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7); // Pokretanje TIM7 u interrupt modu
 8000bb0:	48b7      	ldr	r0, [pc, #732]	; (8000e90 <main+0x340>)
 8000bb2:	f002 fc1d 	bl	80033f0 <HAL_TIM_Base_Start_IT>

    uint8_t mode = 0;              // 0: Podešavanje lozinke, 1: Verifikacija lozinke
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
    uint8_t delay_done = 0;        // Zastavica za provjeru da li je kašnjenje završeno nakon unosa lozinke
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71bb      	strb	r3, [r7, #6]

    while (1)
    {
        // Provjera da li je debounce zastavica postavljena (određuje da li je pritisak tipke detektiran)
        if (debounce_flag)
 8000bbe:	4bb5      	ldr	r3, [pc, #724]	; (8000e94 <main+0x344>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0fa      	beq.n	8000bbe <main+0x6e>
        {
            debounce_flag = 0;  // Resetiranje debounce zastavice nakon obrade
 8000bc8:	4bb2      	ldr	r3, [pc, #712]	; (8000e94 <main+0x344>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]

            // Provjerava ako je pritisnuta '#' tipka
            if (debounce_key == '#')
 8000bce:	4bb2      	ldr	r3, [pc, #712]	; (8000e98 <main+0x348>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b23      	cmp	r3, #35	; 0x23
 8000bd6:	f040 8109 	bne.w	8000dec <main+0x29c>
            {
                if (master_mode)  // Ako je u master modu
 8000bda:	4bb0      	ldr	r3, [pc, #704]	; (8000e9c <main+0x34c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d040      	beq.n	8000c64 <main+0x114>
                {
                    // Provjera da li uneseni master password odgovara glavnoj lozinki
                    if (strcmp(master_input, MASTER_PASSWORD) == 0)
 8000be2:	49af      	ldr	r1, [pc, #700]	; (8000ea0 <main+0x350>)
 8000be4:	48af      	ldr	r0, [pc, #700]	; (8000ea4 <main+0x354>)
 8000be6:	f7ff fb0d 	bl	8000204 <strcmp>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d135      	bne.n	8000c5c <main+0x10c>
                    {
                        memset(stored_password, 0, sizeof(stored_password));  // Resetiranje pohranjene lozinke
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	48ac      	ldr	r0, [pc, #688]	; (8000ea8 <main+0x358>)
 8000bf6:	f003 fae5 	bl	80041c4 <memset>
                        password_set = 0;  // Postavljanje zastavice za resetiranje lozinke
 8000bfa:	4bac      	ldr	r3, [pc, #688]	; (8000eac <main+0x35c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]

                        // Čišćenje LCD ekrana i ispis poruke
                        HD44780_Clear();                            // Čišćenje LCD ekrana
 8000c00:	f7ff fd0c 	bl	800061c <HD44780_Clear>
                        HD44780_SetCursor(0, 0);                    // Postavljanje kursora na početak
 8000c04:	2100      	movs	r1, #0
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fd1e 	bl	8000648 <HD44780_SetCursor>
                        HD44780_PrintSpecialChar(0);                // Specijalni znak š
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd8c 	bl	800072a <HD44780_PrintSpecialChar>
                        HD44780_PrintStr("ifra restartana");        // Ispis "ifra restartana"
 8000c12:	48a7      	ldr	r0, [pc, #668]	; (8000eb0 <main+0x360>)
 8000c14:	f7ff fd96 	bl	8000744 <HD44780_PrintStr>
                        TIM7_Delay(30000);                          // Kašnjenje od 3 sekunde
 8000c18:	f247 5030 	movw	r0, #30000	; 0x7530
 8000c1c:	f7ff ff7c 	bl	8000b18 <TIM7_Delay>
                        HD44780_Clear();                            // Čišćenje LCD ekrana
 8000c20:	f7ff fcfc 	bl	800061c <HD44780_Clear>
                        HD44780_SetCursor(0, 0);                    // Postavljanje kursora na početak
 8000c24:	2100      	movs	r1, #0
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fd0e 	bl	8000648 <HD44780_SetCursor>
                        HD44780_PrintStr("Upi");                    // Ispis "upi"
 8000c2c:	4894      	ldr	r0, [pc, #592]	; (8000e80 <main+0x330>)
 8000c2e:	f7ff fd89 	bl	8000744 <HD44780_PrintStr>
                        HD44780_PrintSpecialChar(0);                // Specijalni znak š
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fd79 	bl	800072a <HD44780_PrintSpecialChar>
                        HD44780_PrintStr("i 1. ");                  // ispis "i 1."
 8000c38:	4892      	ldr	r0, [pc, #584]	; (8000e84 <main+0x334>)
 8000c3a:	f7ff fd83 	bl	8000744 <HD44780_PrintStr>
                        HD44780_PrintSpecialChar(0);                // Specijalni znak š
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fd73 	bl	800072a <HD44780_PrintSpecialChar>
                        HD44780_PrintStr("ifru:");                  // ispis "ifru"
 8000c44:	4890      	ldr	r0, [pc, #576]	; (8000e88 <main+0x338>)
 8000c46:	f7ff fd7d 	bl	8000744 <HD44780_PrintStr>
                        HD44780_SetCursor(0, 1);                            // Postavljanje kursora na drugu liniju
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fcfb 	bl	8000648 <HD44780_SetCursor>
                        mode = 0;                                           // Prelazak u režim podešavanja lozinke
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
                        indeks = 0;                                         // Resetiranje indeksa za unos lozinke
 8000c56:	4b97      	ldr	r3, [pc, #604]	; (8000eb4 <main+0x364>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
                    }
                    master_mode = 0;  // Izlazak iz master moda
 8000c5c:	4b8f      	ldr	r3, [pc, #572]	; (8000e9c <main+0x34c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e7ac      	b.n	8000bbe <main+0x6e>
                }
                else  // Ako nije u master modu
                {
                    if (indeks == PASSWORD_LENGTH)  // Provjera da li je unesena cijela lozinka
 8000c64:	4b93      	ldr	r3, [pc, #588]	; (8000eb4 <main+0x364>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d1a8      	bne.n	8000bbe <main+0x6e>
                    {
                        entered_password[indeks] = '\0';  // Dodaje se null bit
 8000c6c:	4b91      	ldr	r3, [pc, #580]	; (8000eb4 <main+0x364>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b91      	ldr	r3, [pc, #580]	; (8000eb8 <main+0x368>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	5499      	strb	r1, [r3, r2]
                        HD44780_Clear();                  // Čišćenje LCD ekrana
 8000c78:	f7ff fcd0 	bl	800061c <HD44780_Clear>

                        if (mode == 0)  // Ako je u režimu podešavanja lozinke
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d16a      	bne.n	8000d58 <main+0x208>
                        {
                            if (password_set == 0)  // Ako lozinka još nije postavljena
 8000c82:	4b8a      	ldr	r3, [pc, #552]	; (8000eac <main+0x35c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d119      	bne.n	8000cbe <main+0x16e>
                            {
                                strcpy(stored_password, entered_password);  // Spremanje unesene lozinke
 8000c8a:	498b      	ldr	r1, [pc, #556]	; (8000eb8 <main+0x368>)
 8000c8c:	4886      	ldr	r0, [pc, #536]	; (8000ea8 <main+0x358>)
 8000c8e:	f003 fac5 	bl	800421c <strcpy>
                                password_set = 1;                           // Postavljanje "zastavice" za spremanje lozinke
 8000c92:	4b86      	ldr	r3, [pc, #536]	; (8000eac <main+0x35c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
                                HD44780_Clear();                            // Čišćenje LCD ekrana
 8000c98:	f7ff fcc0 	bl	800061c <HD44780_Clear>
                                HD44780_PrintSpecialChar(0);                // Specijalni znak š
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fd44 	bl	800072a <HD44780_PrintSpecialChar>
                                HD44780_PrintStr("ifra zapam");             // ispis "ifra zapam"
 8000ca2:	4886      	ldr	r0, [pc, #536]	; (8000ebc <main+0x36c>)
 8000ca4:	f7ff fd4e 	bl	8000744 <HD44780_PrintStr>
                                HD44780_PrintSpecialChar(1);                // Specijalni znak ć
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fd3e 	bl	800072a <HD44780_PrintSpecialChar>
                                HD44780_PrintStr("ena");                    // ispis "ena"
 8000cae:	4884      	ldr	r0, [pc, #528]	; (8000ec0 <main+0x370>)
 8000cb0:	f7ff fd48 	bl	8000744 <HD44780_PrintStr>
                                TIM7_Delay(10000);                          // Kašnjenje od 1 sekunde
 8000cb4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cb8:	f7ff ff2e 	bl	8000b18 <TIM7_Delay>
 8000cbc:	e00f      	b.n	8000cde <main+0x18e>
                            }
                            else  // Ako je lozinka već postavljena
                            {
                                strcpy(stored_password, entered_password);  // Ažuriranje pohranjene lozinke
 8000cbe:	497e      	ldr	r1, [pc, #504]	; (8000eb8 <main+0x368>)
 8000cc0:	4879      	ldr	r0, [pc, #484]	; (8000ea8 <main+0x358>)
 8000cc2:	f003 faab 	bl	800421c <strcpy>
                                HD44780_Clear();                            // Čišćenje LCD ekrana
 8000cc6:	f7ff fca9 	bl	800061c <HD44780_Clear>
                                HD44780_PrintSpecialChar(0);                // Specijalni znak š
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fd2d 	bl	800072a <HD44780_PrintSpecialChar>
                                HD44780_PrintStr("ifra promenjena");        // ispis "ifra promjenjena"
 8000cd0:	487c      	ldr	r0, [pc, #496]	; (8000ec4 <main+0x374>)
 8000cd2:	f7ff fd37 	bl	8000744 <HD44780_PrintStr>
                                TIM7_Delay(10000);                          // Kašnjenje od 1 sekunde
 8000cd6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cda:	f7ff ff1d 	bl	8000b18 <TIM7_Delay>
                            }

                            // Automatsko otključavanje nakon spremanja
                            HD44780_SetCursor(0, 0);                                             // Postavljanje kursora na početak
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fcb1 	bl	8000648 <HD44780_SetCursor>
                            HD44780_PrintStr("Pristup odobren");                                 // ispis "pristup odobren"
 8000ce6:	4878      	ldr	r0, [pc, #480]	; (8000ec8 <main+0x378>)
 8000ce8:	f7ff fd2c 	bl	8000744 <HD44780_PrintStr>
                            HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_SET);                     // Aktiviranje LED-a
 8000cec:	2201      	movs	r2, #1
 8000cee:	2120      	movs	r1, #32
 8000cf0:	4876      	ldr	r0, [pc, #472]	; (8000ecc <main+0x37c>)
 8000cf2:	f000 fffd 	bl	8001cf0 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_SET);    // Aktiviranje releja
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4875      	ldr	r0, [pc, #468]	; (8000ed0 <main+0x380>)
 8000cfc:	f000 fff8 	bl	8001cf0 <HAL_GPIO_WritePin>
                            TIM7_Delay(20000);                                                   // Kašnjenje od 2 sekunde
 8000d00:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000d04:	f7ff ff08 	bl	8000b18 <TIM7_Delay>
                            HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_RESET);                   // Deaktiviranje LED-a
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	486f      	ldr	r0, [pc, #444]	; (8000ecc <main+0x37c>)
 8000d0e:	f000 ffef 	bl	8001cf0 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_RESET);  // Deaktiviranje releja
 8000d12:	2200      	movs	r2, #0
 8000d14:	2101      	movs	r1, #1
 8000d16:	486e      	ldr	r0, [pc, #440]	; (8000ed0 <main+0x380>)
 8000d18:	f000 ffea 	bl	8001cf0 <HAL_GPIO_WritePin>

                            // Automatski poziv za novu radnju
                            HD44780_Clear();                            // Čišćenje LCD ekrana
 8000d1c:	f7ff fc7e 	bl	800061c <HD44780_Clear>
                            HD44780_SetCursor(0, 0);                    // Postavljanje kursora na početak
 8000d20:	2100      	movs	r1, #0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fc90 	bl	8000648 <HD44780_SetCursor>
                            HD44780_PrintStr("Unesi ");                 // ispis "unesi "
 8000d28:	486a      	ldr	r0, [pc, #424]	; (8000ed4 <main+0x384>)
 8000d2a:	f7ff fd0b 	bl	8000744 <HD44780_PrintStr>
                            HD44780_PrintSpecialChar(0);                // Specijalni znak
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fcfb 	bl	800072a <HD44780_PrintSpecialChar>
                            HD44780_PrintStr("ifru:");                  // ispis "ifru"
 8000d34:	4854      	ldr	r0, [pc, #336]	; (8000e88 <main+0x338>)
 8000d36:	f7ff fd05 	bl	8000744 <HD44780_PrintStr>
                            HD44780_SetCursor(0, 1);                    // Postavljanje kursora na drugu liniju
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fc83 	bl	8000648 <HD44780_SetCursor>
                            memset(entered_password, 0, sizeof(entered_password));  // Resetiranje unesene lozinke
 8000d42:	2205      	movs	r2, #5
 8000d44:	2100      	movs	r1, #0
 8000d46:	485c      	ldr	r0, [pc, #368]	; (8000eb8 <main+0x368>)
 8000d48:	f003 fa3c 	bl	80041c4 <memset>
                            indeks = 0;                                // Resetiranje indeksa za unos lozinke
 8000d4c:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <main+0x364>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
                            mode = 1;                                  // Prelazak u režim verifikacije
 8000d52:	2301      	movs	r3, #1
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e732      	b.n	8000bbe <main+0x6e>
                        }
                        else if (mode == 1)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	f47f af2f 	bne.w	8000bbe <main+0x6e>
                        {
                            if (strcmp(stored_password, entered_password) == 0)  // Provjera lozinke
 8000d60:	4955      	ldr	r1, [pc, #340]	; (8000eb8 <main+0x368>)
 8000d62:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <main+0x358>)
 8000d64:	f7ff fa4e 	bl	8000204 <strcmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d11b      	bne.n	8000da6 <main+0x256>
                            {
                                HD44780_PrintStr("Pristup odobren");                                 // ispis "pristup odobren"
 8000d6e:	4856      	ldr	r0, [pc, #344]	; (8000ec8 <main+0x378>)
 8000d70:	f7ff fce8 	bl	8000744 <HD44780_PrintStr>
                                HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_SET);                     // Aktiviranje LED-a
 8000d74:	2201      	movs	r2, #1
 8000d76:	2120      	movs	r1, #32
 8000d78:	4854      	ldr	r0, [pc, #336]	; (8000ecc <main+0x37c>)
 8000d7a:	f000 ffb9 	bl	8001cf0 <HAL_GPIO_WritePin>
                                HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_SET);    // Aktiviranje releja
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2101      	movs	r1, #1
 8000d82:	4853      	ldr	r0, [pc, #332]	; (8000ed0 <main+0x380>)
 8000d84:	f000 ffb4 	bl	8001cf0 <HAL_GPIO_WritePin>
                                TIM7_Delay(30000);                                                   // Kašnjenje od 3 sekunde
 8000d88:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d8c:	f7ff fec4 	bl	8000b18 <TIM7_Delay>
                                HAL_GPIO_WritePin(GPIOA, LED_PIN, GPIO_PIN_RESET);                   // Deaktiviranje LED-a
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	484d      	ldr	r0, [pc, #308]	; (8000ecc <main+0x37c>)
 8000d96:	f000 ffab 	bl	8001cf0 <HAL_GPIO_WritePin>
                                HAL_GPIO_WritePin(GPIO_PORT_RELAY, GPIO_PIN_RELAY, GPIO_PIN_RESET);  // Deaktiviranje releja
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	484c      	ldr	r0, [pc, #304]	; (8000ed0 <main+0x380>)
 8000da0:	f000 ffa6 	bl	8001cf0 <HAL_GPIO_WritePin>
 8000da4:	e002      	b.n	8000dac <main+0x25c>
                            }
                            else
                            {
                                HD44780_PrintStr("Pristup zabranjen");
 8000da6:	484c      	ldr	r0, [pc, #304]	; (8000ed8 <main+0x388>)
 8000da8:	f7ff fccc 	bl	8000744 <HD44780_PrintStr>
                            }


                            TIM7_Delay(20000);                          // Kašnjenje od 2 sekunde
 8000dac:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000db0:	f7ff feb2 	bl	8000b18 <TIM7_Delay>
                            HD44780_Clear();                            // Čišćenje LCD ekrana
 8000db4:	f7ff fc32 	bl	800061c <HD44780_Clear>
                            HD44780_SetCursor(0, 0);                    // Postavljanje kursora na početak
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fc44 	bl	8000648 <HD44780_SetCursor>
                            HD44780_PrintStr("Unesi ");                 // ispis "Unesi"
 8000dc0:	4844      	ldr	r0, [pc, #272]	; (8000ed4 <main+0x384>)
 8000dc2:	f7ff fcbf 	bl	8000744 <HD44780_PrintStr>
                            HD44780_PrintSpecialChar(0);                // Specijalni znak
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fcaf 	bl	800072a <HD44780_PrintSpecialChar>
                            HD44780_PrintStr("ifru:");                  // ispis "ifru"
 8000dcc:	482e      	ldr	r0, [pc, #184]	; (8000e88 <main+0x338>)
 8000dce:	f7ff fcb9 	bl	8000744 <HD44780_PrintStr>
                            HD44780_SetCursor(0, 1);                    // Postavljanje kursora na drugu liniju
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fc37 	bl	8000648 <HD44780_SetCursor>
                            memset(entered_password, 0, sizeof(entered_password));  // Resetiranje unesene lozinke
 8000dda:	2205      	movs	r2, #5
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4836      	ldr	r0, [pc, #216]	; (8000eb8 <main+0x368>)
 8000de0:	f003 f9f0 	bl	80041c4 <memset>
                            indeks = 0;                                 // Resetiranje indeksa za unos lozinke
 8000de4:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <main+0x364>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e6e8      	b.n	8000bbe <main+0x6e>
                        }
                    }
                }
            }
            // Provjerava ako je pritisnuta 'C' tipka
            else if (debounce_key == 'C')
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <main+0x348>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b43      	cmp	r3, #67	; 0x43
 8000df4:	d11e      	bne.n	8000e34 <main+0x2e4>
            {
                master_mode = 1;                            // Ulazak u master mode
 8000df6:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <main+0x34c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
                HD44780_Clear();                            // Čišćenje LCD ekrana
 8000dfc:	f7ff fc0e 	bl	800061c <HD44780_Clear>
                HD44780_SetCursor(0, 0);                    // Postavljanje kursora na početak
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fc20 	bl	8000648 <HD44780_SetCursor>
                HD44780_PrintStr("Master ");                // Ispis teksta "Master "
 8000e08:	4834      	ldr	r0, [pc, #208]	; (8000edc <main+0x38c>)
 8000e0a:	f7ff fc9b 	bl	8000744 <HD44780_PrintStr>
                HD44780_PrintSpecialChar(0);                // Ispis specijalnog znaka š
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fc8b 	bl	800072a <HD44780_PrintSpecialChar>
                HD44780_PrintStr("ifra:");                  // Ispis teksta "ifra:"
 8000e14:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <main+0x390>)
 8000e16:	f7ff fc95 	bl	8000744 <HD44780_PrintStr>
                HD44780_SetCursor(0, 1);                    // Postavljanje kursora na drugu liniju
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fc13 	bl	8000648 <HD44780_SetCursor>
                memset(master_input, 0, sizeof(master_input));  // Resetiranje unosa glavne lozinke
 8000e22:	2207      	movs	r2, #7
 8000e24:	2100      	movs	r1, #0
 8000e26:	481f      	ldr	r0, [pc, #124]	; (8000ea4 <main+0x354>)
 8000e28:	f003 f9cc 	bl	80041c4 <memset>
                indeks = 0;                                // Resetiranje indeksa za unos lozinke
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <main+0x364>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e6c4      	b.n	8000bbe <main+0x6e>
            }
            // Ako je u master modu i pritisnuti znak je broj od 0 do 9
            else if (master_mode && indeks < 6 && debounce_key >= '0' && debounce_key <= '9')
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <main+0x34c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d053      	beq.n	8000ee4 <main+0x394>
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <main+0x364>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d84f      	bhi.n	8000ee4 <main+0x394>
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <main+0x348>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e4c:	d94a      	bls.n	8000ee4 <main+0x394>
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <main+0x348>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b39      	cmp	r3, #57	; 0x39
 8000e56:	d845      	bhi.n	8000ee4 <main+0x394>
            {
                master_input[indeks++] = debounce_key;      // Dodavanje broja u master lozinku
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <main+0x364>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	b2d1      	uxtb	r1, r2
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <main+0x364>)
 8000e62:	7011      	strb	r1, [r2, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <main+0x348>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2d9      	uxtb	r1, r3
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <main+0x354>)
 8000e6e:	5499      	strb	r1, [r3, r2]

                HD44780_PrintChar(debounce_key);            // Prikaz unesenog broja
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <main+0x348>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc79 	bl	800076e <HD44780_PrintChar>
 8000e7c:	e05a      	b.n	8000f34 <main+0x3e4>
 8000e7e:	bf00      	nop
 8000e80:	08004254 	.word	0x08004254
 8000e84:	08004258 	.word	0x08004258
 8000e88:	08004260 	.word	0x08004260
 8000e8c:	200000dc 	.word	0x200000dc
 8000e90:	20000124 	.word	0x20000124
 8000e94:	2000016c 	.word	0x2000016c
 8000e98:	2000016d 	.word	0x2000016d
 8000e9c:	2000017e 	.word	0x2000017e
 8000ea0:	08004268 	.word	0x08004268
 8000ea4:	20000180 	.word	0x20000180
 8000ea8:	20000170 	.word	0x20000170
 8000eac:	2000017d 	.word	0x2000017d
 8000eb0:	08004270 	.word	0x08004270
 8000eb4:	2000016e 	.word	0x2000016e
 8000eb8:	20000178 	.word	0x20000178
 8000ebc:	08004280 	.word	0x08004280
 8000ec0:	0800428c 	.word	0x0800428c
 8000ec4:	08004290 	.word	0x08004290
 8000ec8:	080042a0 	.word	0x080042a0
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	080042b0 	.word	0x080042b0
 8000ed8:	080042b8 	.word	0x080042b8
 8000edc:	080042cc 	.word	0x080042cc
 8000ee0:	080042d4 	.word	0x080042d4
            }
            // Ako nije u master modu i pritisnuti znak je broj od 0 do 9
            else if (!master_mode && indeks < PASSWORD_LENGTH && debounce_key >= '0' && debounce_key <= '9')
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <main+0x3e8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f47f ae68 	bne.w	8000bbe <main+0x6e>
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <main+0x3ec>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	f63f ae63 	bhi.w	8000bbe <main+0x6e>
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <main+0x3f0>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b2f      	cmp	r3, #47	; 0x2f
 8000f00:	f67f ae5d 	bls.w	8000bbe <main+0x6e>
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <main+0x3f0>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b39      	cmp	r3, #57	; 0x39
 8000f0c:	f63f ae57 	bhi.w	8000bbe <main+0x6e>
            {
                entered_password[indeks++] = debounce_key;  // Dodavanje broja u unesenu lozinku
 8000f10:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <main+0x3ec>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	b2d1      	uxtb	r1, r2
 8000f18:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <main+0x3ec>)
 8000f1a:	7011      	strb	r1, [r2, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <main+0x3f0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2d9      	uxtb	r1, r3
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <main+0x3f4>)
 8000f26:	5499      	strb	r1, [r3, r2]

                HD44780_PrintChar(debounce_key);            // Prikaz unesenog broja
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <main+0x3f0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fc1d 	bl	800076e <HD44780_PrintChar>
        if (debounce_flag)
 8000f34:	e643      	b.n	8000bbe <main+0x6e>
 8000f36:	bf00      	nop
 8000f38:	2000017e 	.word	0x2000017e
 8000f3c:	2000016e 	.word	0x2000016e
 8000f40:	2000016d 	.word	0x2000016d
 8000f44:	20000178 	.word	0x20000178

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2234      	movs	r2, #52	; 0x34
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f934 	bl	80041c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b2a      	ldr	r3, [pc, #168]	; (800101c <SystemClock_Config+0xd4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a29      	ldr	r2, [pc, #164]	; (800101c <SystemClock_Config+0xd4>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <SystemClock_Config+0xd4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <SystemClock_Config+0xd8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <SystemClock_Config+0xd8>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <SystemClock_Config+0xd8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fe8c 	bl	8002cf4 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fe2:	f000 f9af 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fb2c 	bl	8002660 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800100e:	f000 f999 	bl	8001344 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	; 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C1_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C1_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C1_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C1_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C1_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C1_Init+0x50>)
 8001062:	f000 fe5f 	bl	8001d24 <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 f96a 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000040 	.word	0x20000040
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0

08001080 <MX_TIM6_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM6_Init+0x74>)
 8001090:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <MX_TIM6_Init+0x78>)
 8001092:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_TIM6_Init+0x74>)
 8001096:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800109a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM6_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500-1;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_TIM6_Init+0x74>)
 80010a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80010a8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_TIM6_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <MX_TIM6_Init+0x74>)
 80010b2:	f002 f8bd 	bl	8003230 <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010bc:	f000 f942 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <MX_TIM6_Init+0x74>)
 80010ce:	f002 fd25 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80010d8:	f000 f934 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Enable TIM6 global interrupt
   HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f000 fc22 	bl	800192a <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e6:	2036      	movs	r0, #54	; 0x36
 80010e8:	f000 fc3b 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000dc 	.word	0x200000dc
 80010f8:	40001000 	.word	0x40001000

080010fc <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_Init 0 */

    /* USER CODE END TIM7_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

    htim7.Instance = TIM7;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_TIM7_Init+0x70>)
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <MX_TIM7_Init+0x74>)
 800111c:	601a      	str	r2, [r3, #0]
    htim7.Init.Prescaler = 8400-1;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_TIM7_Init+0x70>)
 8001120:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001124:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_TIM7_Init+0x70>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 40000-1;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_TIM7_Init+0x70>)
 800112e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001132:	60da      	str	r2, [r3, #12]
    htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MX_TIM7_Init+0x70>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim7);
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_TIM7_Init+0x70>)
 800113c:	f002 f878 	bl	8003230 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	60bb      	str	r3, [r7, #8]
    HAL_TIM_ConfigClockSource(&htim7, &sClockSourceConfig);
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM7_Init+0x70>)
 800114e:	f002 faaf 	bl	80036b0 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM7_Init+0x70>)
 8001160:	f002 fcdc 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>

    /* USER CODE BEGIN TIM7_Init 1 */

    /* USER CODE END TIM7_Init 1 */
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000124 	.word	0x20000124
 8001170:	40001400 	.word	0x40001400

08001174 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART2_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART2_UART_Init+0x4c>)
 80011ac:	f002 fd46 	bl	8003c3c <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f000 f8c5 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000094 	.word	0x20000094
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b54      	ldr	r3, [pc, #336]	; (8001334 <MX_GPIO_Init+0x16c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a53      	ldr	r2, [pc, #332]	; (8001334 <MX_GPIO_Init+0x16c>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <MX_GPIO_Init+0x16c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <MX_GPIO_Init+0x16c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <MX_GPIO_Init+0x16c>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <MX_GPIO_Init+0x16c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b46      	ldr	r3, [pc, #280]	; (8001334 <MX_GPIO_Init+0x16c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a45      	ldr	r2, [pc, #276]	; (8001334 <MX_GPIO_Init+0x16c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <MX_GPIO_Init+0x16c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <MX_GPIO_Init+0x16c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a3e      	ldr	r2, [pc, #248]	; (8001334 <MX_GPIO_Init+0x16c>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <MX_GPIO_Init+0x16c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	4839      	ldr	r0, [pc, #228]	; (8001338 <MX_GPIO_Init+0x170>)
 8001254:	f000 fd4c 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800125e:	4837      	ldr	r0, [pc, #220]	; (800133c <MX_GPIO_Init+0x174>)
 8001260:	f000 fd46 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800126a:	4835      	ldr	r0, [pc, #212]	; (8001340 <MX_GPIO_Init+0x178>)
 800126c:	f000 fd40 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001276:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	482c      	ldr	r0, [pc, #176]	; (8001338 <MX_GPIO_Init+0x170>)
 8001288:	f000 fb86 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4825      	ldr	r0, [pc, #148]	; (8001338 <MX_GPIO_Init+0x170>)
 80012a4:	f000 fb78 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80012a8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	481e      	ldr	r0, [pc, #120]	; (800133c <MX_GPIO_Init+0x174>)
 80012c2:	f000 fb69 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_GPIO_Init+0x174>)
 80012da:	f000 fb5d 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80012de:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_GPIO_Init+0x178>)
 80012f8:	f000 fb4e 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <MX_GPIO_Init+0x170>)
 8001310:	f000 fb42 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_GPIO_Init+0x178>)
 8001328:	f000 fb36 	bl	8001998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_MspInit+0x4c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800138e:	2007      	movs	r0, #7
 8001390:	f000 fac0 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_I2C_MspInit+0x84>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12c      	bne.n	800141c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_I2C_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_I2C_MspInit+0x88>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_I2C_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e4:	2312      	movs	r3, #18
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f0:	2304      	movs	r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <HAL_I2C_MspInit+0x8c>)
 80013fc:	f000 facc 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_I2C_MspInit+0x88>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_I2C_MspInit+0x88>)
 800140a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140e:	6413      	str	r3, [r2, #64]	; 0x40
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_I2C_MspInit+0x88>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40005400 	.word	0x40005400
 8001428:	40023800 	.word	0x40023800
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_TIM_Base_MspInit+0x80>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d116      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_TIM_Base_MspInit+0x84>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <HAL_TIM_Base_MspInit+0x84>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_TIM_Base_MspInit+0x84>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2036      	movs	r0, #54	; 0x36
 8001464:	f000 fa61 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f000 fa7a 	bl	8001962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800146e:	e01a      	b.n	80014a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_TIM_Base_MspInit+0x88>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d115      	bne.n	80014a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_TIM_Base_MspInit+0x84>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0x84>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_TIM_Base_MspInit+0x84>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2037      	movs	r0, #55	; 0x37
 800149c:	f000 fa45 	bl	800192a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014a0:	2037      	movs	r0, #55	; 0x37
 80014a2:	f000 fa5e 	bl	8001962 <HAL_NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40001000 	.word	0x40001000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40001400 	.word	0x40001400

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_UART_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0x88>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_UART_MspInit+0x88>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_UART_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_UART_MspInit+0x88>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_UART_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001516:	230c      	movs	r3, #12
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001526:	2307      	movs	r3, #7
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_UART_MspInit+0x8c>)
 8001532:	f000 fa31 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40004400 	.word	0x40004400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f8a4 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM6_DAC_IRQHandler+0x10>)
 80015ae:	f001 ff8f 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000dc 	.word	0x200000dc

080015bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM7_IRQHandler+0x10>)
 80015c2:	f001 ff85 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000124 	.word	0x20000124

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015f8:	f7ff ffea 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001622:	f002 fdd7 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fa93 	bl	8000b50 <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001638:	08004304 	.word	0x08004304
  ldr r2, =_sbss
 800163c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001640:	20000194 	.word	0x20000194

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 f94f 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fe68 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f967 	bl	800197e <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f92f 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000010 	.word	0x20000010
 80016e4:	20000018 	.word	0x20000018
 80016e8:	20000014 	.word	0x20000014

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000018 	.word	0x20000018
 8001710:	20000190 	.word	0x20000190

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000190 	.word	0x20000190

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffee 	bl	8001714 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffde 	bl	8001714 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000018 	.word	0x20000018

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e165      	b.n	8001c80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8154 	bne.w	8001c7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d130      	bne.n	8001a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0201 	and.w	r2, r3, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d017      	beq.n	8001a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80ae 	beq.w	8001c7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a5c      	ldr	r2, [pc, #368]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_GPIO_Init+0x308>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x21a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	; (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x216>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	; (8001ca8 <HAL_GPIO_Init+0x310>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x212>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x20a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x206>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x202>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	; (8001c9c <HAL_GPIO_Init+0x304>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_GPIO_Init+0x324>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae96 	bls.w	80019b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d00:	787b      	ldrb	r3, [r7, #1]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	619a      	str	r2, [r3, #24]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e12b      	b.n	8001f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fb28 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d88:	f000 fd5c 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8001d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4a81      	ldr	r2, [pc, #516]	; (8001f98 <HAL_I2C_Init+0x274>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d807      	bhi.n	8001da8 <HAL_I2C_Init+0x84>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a80      	ldr	r2, [pc, #512]	; (8001f9c <HAL_I2C_Init+0x278>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf94      	ite	ls
 8001da0:	2301      	movls	r3, #1
 8001da2:	2300      	movhi	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e006      	b.n	8001db6 <HAL_I2C_Init+0x92>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a7d      	ldr	r2, [pc, #500]	; (8001fa0 <HAL_I2C_Init+0x27c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bf94      	ite	ls
 8001db0:	2301      	movls	r3, #1
 8001db2:	2300      	movhi	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0e7      	b.n	8001f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a78      	ldr	r2, [pc, #480]	; (8001fa4 <HAL_I2C_Init+0x280>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_I2C_Init+0x274>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d802      	bhi.n	8001df8 <HAL_I2C_Init+0xd4>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	e009      	b.n	8001e0c <HAL_I2C_Init+0xe8>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_I2C_Init+0x284>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	495c      	ldr	r1, [pc, #368]	; (8001f98 <HAL_I2C_Init+0x274>)
 8001e28:	428b      	cmp	r3, r1
 8001e2a:	d819      	bhi.n	8001e60 <HAL_I2C_Init+0x13c>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3a:	1c59      	adds	r1, r3, #1
 8001e3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e40:	400b      	ands	r3, r1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <HAL_I2C_Init+0x138>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e59      	subs	r1, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	e051      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	e04f      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <HAL_I2C_Init+0x168>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e58      	subs	r0, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	e012      	b.n	8001eb2 <HAL_I2C_Init+0x18e>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e58      	subs	r0, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	0099      	lsls	r1, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Init+0x196>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e022      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_I2C_Init+0x1bc>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1e58      	subs	r0, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	440b      	add	r3, r1
 8001ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ede:	e00f      	b.n	8001f00 <HAL_I2C_Init+0x1dc>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	0099      	lsls	r1, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	6809      	ldr	r1, [r1, #0]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6911      	ldr	r1, [r2, #16]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68d2      	ldr	r2, [r2, #12]
 8001f3a:	4311      	orrs	r1, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	000186a0 	.word	0x000186a0
 8001f9c:	001e847f 	.word	0x001e847f
 8001fa0:	003d08ff 	.word	0x003d08ff
 8001fa4:	431bde83 	.word	0x431bde83
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fba8 	bl	8001714 <HAL_GetTick>
 8001fc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	f040 80e0 	bne.w	8002194 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2319      	movs	r3, #25
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4970      	ldr	r1, [pc, #448]	; (80021a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f964 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	e0d3      	b.n	8002196 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2C_Master_Transmit+0x50>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0cc      	b.n	8002196 <HAL_I2C_Master_Transmit+0x1ea>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d007      	beq.n	8002022 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002030:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2221      	movs	r2, #33	; 0x21
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2210      	movs	r2, #16
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	893a      	ldrh	r2, [r7, #8]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002064:	8979      	ldrh	r1, [r7, #10]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f89c 	bl	80021a8 <I2C_MasterRequestWrite>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e08d      	b.n	8002196 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002090:	e066      	b.n	8002160 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	6a39      	ldr	r1, [r7, #32]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fa22 	bl	80024e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d107      	bne.n	80020ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e06b      	b.n	8002196 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d11b      	bne.n	8002134 <HAL_I2C_Master_Transmit+0x188>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d017      	beq.n	8002134 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	6a39      	ldr	r1, [r7, #32]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fa19 	bl	8002570 <I2C_WaitOnBTFFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2b04      	cmp	r3, #4
 800214a:	d107      	bne.n	800215c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e01a      	b.n	8002196 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	d194      	bne.n	8002092 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	00100002 	.word	0x00100002
 80021a4:	ffff0000 	.word	0xffff0000

080021a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	460b      	mov	r3, r1
 80021b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d006      	beq.n	80021d2 <I2C_MasterRequestWrite+0x2a>
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d003      	beq.n	80021d2 <I2C_MasterRequestWrite+0x2a>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021d0:	d108      	bne.n	80021e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e00b      	b.n	80021fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d107      	bne.n	80021fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f84f 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002222:	d103      	bne.n	800222c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e035      	b.n	800229c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002238:	d108      	bne.n	800224c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223a:	897b      	ldrh	r3, [r7, #10]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	e01b      	b.n	8002284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	11db      	asrs	r3, r3, #7
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0306 	and.w	r3, r3, #6
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f063 030f 	orn	r3, r3, #15
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	490e      	ldr	r1, [pc, #56]	; (80022a4 <I2C_MasterRequestWrite+0xfc>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f898 	bl	80023a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e010      	b.n	800229c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <I2C_MasterRequestWrite+0x100>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f888 	bl	80023a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	00010008 	.word	0x00010008
 80022a8:	00010002 	.word	0x00010002

080022ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022bc:	e048      	b.n	8002350 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d044      	beq.n	8002350 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c6:	f7ff fa25 	bl	8001714 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d302      	bcc.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d139      	bne.n	8002350 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10d      	bne.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x56>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	43da      	mvns	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	e00c      	b.n	800231c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	429a      	cmp	r2, r3
 8002320:	d116      	bne.n	8002350 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e023      	b.n	8002398 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10d      	bne.n	8002376 <I2C_WaitOnFlagUntilTimeout+0xca>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	43da      	mvns	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	e00c      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	43da      	mvns	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	429a      	cmp	r2, r3
 8002394:	d093      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ae:	e071      	b.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023be:	d123      	bne.n	8002408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f043 0204 	orr.w	r2, r3, #4
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e067      	b.n	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240e:	d041      	beq.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002410:	f7ff f980 	bl	8001714 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d302      	bcc.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d136      	bne.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10c      	bne.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e00b      	b.n	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e021      	b.n	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10c      	bne.n	80024b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e00b      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4013      	ands	r3, r2
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f47f af6d 	bne.w	80023b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ec:	e034      	b.n	8002558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f886 	bl	8002600 <I2C_IsAcknowledgeFailed>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e034      	b.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d028      	beq.n	8002558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7ff f905 	bl	8001714 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d11d      	bne.n	8002558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b80      	cmp	r3, #128	; 0x80
 8002528:	d016      	beq.n	8002558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e007      	b.n	8002568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d1c3      	bne.n	80024ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800257c:	e034      	b.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f83e 	bl	8002600 <I2C_IsAcknowledgeFailed>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e034      	b.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d028      	beq.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7ff f8bd 	bl	8001714 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11d      	bne.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d016      	beq.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e007      	b.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d1c3      	bne.n	800257e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d11b      	bne.n	8002650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f043 0204 	orr.w	r2, r3, #4
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0cc      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b68      	ldr	r3, [pc, #416]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d90c      	bls.n	800269c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b65      	ldr	r3, [pc, #404]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b8      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	494d      	ldr	r1, [pc, #308]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d044      	beq.n	8002780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d119      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d003      	beq.n	800271e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e067      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4934      	ldr	r1, [pc, #208]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7fe ffe0 	bl	8001714 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe ffdc 	bl	8001714 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e04f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d20c      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e032      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e6:	f000 f855 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	490a      	ldr	r1, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	5ccb      	ldrb	r3, [r1, r3]
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe ff40 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00
 800281c:	40023800 	.word	0x40023800
 8002820:	080042dc 	.word	0x080042dc
 8002824:	20000010 	.word	0x20000010
 8002828:	20000014 	.word	0x20000014

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000010 	.word	0x20000010

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	080042ec 	.word	0x080042ec

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0b5b      	lsrs	r3, r3, #13
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	080042ec 	.word	0x080042ec

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002898:	b0ae      	sub	sp, #184	; 0xb8
 800289a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ba:	4bcb      	ldr	r3, [pc, #812]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	f200 8206 	bhi.w	8002cd4 <HAL_RCC_GetSysClockFreq+0x440>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	08002905 	.word	0x08002905
 80028d4:	08002cd5 	.word	0x08002cd5
 80028d8:	08002cd5 	.word	0x08002cd5
 80028dc:	08002cd5 	.word	0x08002cd5
 80028e0:	0800290d 	.word	0x0800290d
 80028e4:	08002cd5 	.word	0x08002cd5
 80028e8:	08002cd5 	.word	0x08002cd5
 80028ec:	08002cd5 	.word	0x08002cd5
 80028f0:	08002915 	.word	0x08002915
 80028f4:	08002cd5 	.word	0x08002cd5
 80028f8:	08002cd5 	.word	0x08002cd5
 80028fc:	08002cd5 	.word	0x08002cd5
 8002900:	08002b05 	.word	0x08002b05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4bb9      	ldr	r3, [pc, #740]	; (8002bec <HAL_RCC_GetSysClockFreq+0x358>)
 8002906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800290a:	e1e7      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4bb8      	ldr	r3, [pc, #736]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800290e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002912:	e1e3      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002914:	4bb4      	ldr	r3, [pc, #720]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800291c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002920:	4bb1      	ldr	r3, [pc, #708]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d071      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292c:	4bae      	ldr	r3, [pc, #696]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002938:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800293c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800294e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4621      	mov	r1, r4
 800296c:	1a51      	subs	r1, r2, r1
 800296e:	6439      	str	r1, [r7, #64]	; 0x40
 8002970:	4629      	mov	r1, r5
 8002972:	eb63 0301 	sbc.w	r3, r3, r1
 8002976:	647b      	str	r3, [r7, #68]	; 0x44
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002984:	4649      	mov	r1, r9
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	4641      	mov	r1, r8
 800298a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298e:	4641      	mov	r1, r8
 8002990:	018a      	lsls	r2, r1, #6
 8002992:	4641      	mov	r1, r8
 8002994:	1a51      	subs	r1, r2, r1
 8002996:	63b9      	str	r1, [r7, #56]	; 0x38
 8002998:	4649      	mov	r1, r9
 800299a:	eb63 0301 	sbc.w	r3, r3, r1
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80029ac:	4649      	mov	r1, r9
 80029ae:	00cb      	lsls	r3, r1, #3
 80029b0:	4641      	mov	r1, r8
 80029b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b6:	4641      	mov	r1, r8
 80029b8:	00ca      	lsls	r2, r1, #3
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	4622      	mov	r2, r4
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
 80029c6:	462b      	mov	r3, r5
 80029c8:	460a      	mov	r2, r1
 80029ca:	eb42 0303 	adc.w	r3, r2, r3
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029dc:	4629      	mov	r1, r5
 80029de:	024b      	lsls	r3, r1, #9
 80029e0:	4621      	mov	r1, r4
 80029e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029e6:	4621      	mov	r1, r4
 80029e8:	024a      	lsls	r2, r1, #9
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a00:	f7fd fc0a 	bl	8000218 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a0e:	e067      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b75      	ldr	r3, [pc, #468]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	f04f 0000 	mov.w	r0, #0
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	0159      	lsls	r1, r3, #5
 8002a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a44:	0150      	lsls	r0, r2, #5
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	1a51      	subs	r1, r2, r1
 8002a4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb63 0301 	sbc.w	r3, r3, r1
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a64:	4649      	mov	r1, r9
 8002a66:	018b      	lsls	r3, r1, #6
 8002a68:	4641      	mov	r1, r8
 8002a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6e:	4641      	mov	r1, r8
 8002a70:	018a      	lsls	r2, r1, #6
 8002a72:	4641      	mov	r1, r8
 8002a74:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a78:	4649      	mov	r1, r9
 8002a7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a92:	4692      	mov	sl, r2
 8002a94:	469b      	mov	fp, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	eb1a 0303 	adds.w	r3, sl, r3
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	462b      	mov	r3, r5
 8002aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	028b      	lsls	r3, r1, #10
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002abc:	4621      	mov	r1, r4
 8002abe:	028a      	lsls	r2, r1, #10
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ac8:	2200      	movs	r2, #0
 8002aca:	673b      	str	r3, [r7, #112]	; 0x70
 8002acc:	677a      	str	r2, [r7, #116]	; 0x74
 8002ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ad2:	f7fd fba1 	bl	8000218 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4613      	mov	r3, r2
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b02:	e0eb      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b04:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d06b      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	2200      	movs	r2, #0
 8002b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b30:	2300      	movs	r3, #0
 8002b32:	667b      	str	r3, [r7, #100]	; 0x64
 8002b34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b38:	4622      	mov	r2, r4
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	f04f 0000 	mov.w	r0, #0
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	0159      	lsls	r1, r3, #5
 8002b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4a:	0150      	lsls	r0, r2, #5
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4621      	mov	r1, r4
 8002b52:	1a51      	subs	r1, r2, r1
 8002b54:	61b9      	str	r1, [r7, #24]
 8002b56:	4629      	mov	r1, r5
 8002b58:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b6a:	4659      	mov	r1, fp
 8002b6c:	018b      	lsls	r3, r1, #6
 8002b6e:	4651      	mov	r1, sl
 8002b70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b74:	4651      	mov	r1, sl
 8002b76:	018a      	lsls	r2, r1, #6
 8002b78:	4651      	mov	r1, sl
 8002b7a:	ebb2 0801 	subs.w	r8, r2, r1
 8002b7e:	4659      	mov	r1, fp
 8002b80:	eb63 0901 	sbc.w	r9, r3, r1
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b98:	4690      	mov	r8, r2
 8002b9a:	4699      	mov	r9, r3
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	eb18 0303 	adds.w	r3, r8, r3
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	eb49 0303 	adc.w	r3, r9, r3
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bb8:	4629      	mov	r1, r5
 8002bba:	024b      	lsls	r3, r1, #9
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	024a      	lsls	r2, r1, #9
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bce:	2200      	movs	r2, #0
 8002bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bd8:	f7fd fb1e 	bl	8000218 <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be6:	e065      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x420>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400
 8002bf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_GetSysClockFreq+0x458>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	4611      	mov	r1, r2
 8002c00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c04:	653b      	str	r3, [r7, #80]	; 0x50
 8002c06:	2300      	movs	r3, #0
 8002c08:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c0e:	4642      	mov	r2, r8
 8002c10:	464b      	mov	r3, r9
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	0159      	lsls	r1, r3, #5
 8002c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c20:	0150      	lsls	r0, r2, #5
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4641      	mov	r1, r8
 8002c28:	1a51      	subs	r1, r2, r1
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c40:	4659      	mov	r1, fp
 8002c42:	018b      	lsls	r3, r1, #6
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	018a      	lsls	r2, r1, #6
 8002c4e:	4651      	mov	r1, sl
 8002c50:	1a54      	subs	r4, r2, r1
 8002c52:	4659      	mov	r1, fp
 8002c54:	eb63 0501 	sbc.w	r5, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	00eb      	lsls	r3, r5, #3
 8002c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c66:	00e2      	lsls	r2, r4, #3
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461d      	mov	r5, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	18e3      	adds	r3, r4, r3
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	464b      	mov	r3, r9
 8002c74:	eb45 0303 	adc.w	r3, r5, r3
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c86:	4629      	mov	r1, r5
 8002c88:	028b      	lsls	r3, r1, #10
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c90:	4621      	mov	r1, r4
 8002c92:	028a      	lsls	r2, r1, #10
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ca2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ca6:	f7fd fab7 	bl	8000218 <__aeabi_uldivmod>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCC_GetSysClockFreq+0x458>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0f1b      	lsrs	r3, r3, #28
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cd2:	e003      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	37b8      	adds	r7, #184	; 0xb8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400

08002cf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e28d      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8083 	beq.w	8002e1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d14:	4b94      	ldr	r3, [pc, #592]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d019      	beq.n	8002d54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d20:	4b91      	ldr	r3, [pc, #580]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d2c:	4b8e      	ldr	r3, [pc, #568]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d38:	d00c      	beq.n	8002d54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d46:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b84      	ldr	r3, [pc, #528]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d05b      	beq.n	8002e18 <HAL_RCC_OscConfig+0x124>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d157      	bne.n	8002e18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e25a      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x90>
 8002d76:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a7b      	ldr	r2, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xcc>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0xb4>
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a75      	ldr	r2, [pc, #468]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a72      	ldr	r2, [pc, #456]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xcc>
 8002da8:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6e      	ldr	r2, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6b      	ldr	r2, [pc, #428]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fca4 	bl	8001714 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fca0 	bl	8001714 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e21f      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xdc>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fc90 	bl	8001714 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fc8c 	bl	8001714 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e20b      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x104>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d06f      	beq.n	8002f06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e26:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e32:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d11c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x186>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e1d3      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4937      	ldr	r1, [pc, #220]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	e03a      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_OscConfig+0x278>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fc39 	bl	8001714 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fc35 	bl	8001714 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e1b4      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4925      	ldr	r1, [pc, #148]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e015      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCC_OscConfig+0x278>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fc18 	bl	8001714 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fc14 	bl	8001714 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e193      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d036      	beq.n	8002f80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fbf8 	bl	8001714 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fe fbf4 	bl	8001714 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e173      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x234>
 8002f46:	e01b      	b.n	8002f80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fbe1 	bl	8001714 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	e00e      	b.n	8002f74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fe fbdd 	bl	8001714 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d907      	bls.n	8002f74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e15c      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	42470000 	.word	0x42470000
 8002f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f74:	4b8a      	ldr	r3, [pc, #552]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ea      	bne.n	8002f56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8097 	beq.w	80030bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f92:	4b83      	ldr	r3, [pc, #524]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a7e      	ldr	r2, [pc, #504]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbe:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d118      	bne.n	8002ffc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a75      	ldr	r2, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 8002fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fb9d 	bl	8001714 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fde:	f7fe fb99 	bl	8001714 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e118      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	; (80031a4 <HAL_RCC_OscConfig+0x4b0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x31e>
 8003004:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	e01c      	b.n	800304c <HAL_RCC_OscConfig+0x358>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x340>
 800301a:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a60      	ldr	r2, [pc, #384]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
 8003026:	4b5e      	ldr	r3, [pc, #376]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4a5d      	ldr	r2, [pc, #372]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6713      	str	r3, [r2, #112]	; 0x70
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0x358>
 8003034:	4b5a      	ldr	r3, [pc, #360]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a59      	ldr	r2, [pc, #356]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003046:	f023 0304 	bic.w	r3, r3, #4
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fb5e 	bl	8001714 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe fb5a 	bl	8001714 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0d7      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0ee      	beq.n	800305c <HAL_RCC_OscConfig+0x368>
 800307e:	e014      	b.n	80030aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fb48 	bl	8001714 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7fe fb44 	bl	8001714 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0c1      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ee      	bne.n	8003088 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80ad 	beq.w	8003220 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d060      	beq.n	8003194 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d145      	bne.n	8003166 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b33      	ldr	r3, [pc, #204]	; (80031a8 <HAL_RCC_OscConfig+0x4b4>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fb18 	bl	8001714 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fb14 	bl	8001714 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e093      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	3b01      	subs	r3, #1
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	491b      	ldr	r1, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x4b4>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe fae9 	bl	8001714 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe fae5 	bl	8001714 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e064      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x452>
 8003164:	e05c      	b.n	8003220 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x4b4>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fad2 	bl	8001714 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe face 	bl	8001714 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04d      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x480>
 8003192:	e045      	b.n	8003220 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e040      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x538>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d030      	beq.n	800321c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d129      	bne.n	800321c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d122      	bne.n	800321c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d119      	bne.n	800321c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10f      	bne.n	800321c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e041      	b.n	80032c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f8ea 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f000 fb0e 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d001      	beq.n	80032e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e046      	b.n	8003376 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <HAL_TIM_Base_Start+0xb4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d01d      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_TIM_Base_Start+0xb8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_TIM_Base_Start+0xbc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_TIM_Base_Start+0xc0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <HAL_TIM_Base_Start+0xc4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_TIM_Base_Start+0xc8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_Base_Start+0x70>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <HAL_TIM_Base_Start+0xcc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d111      	bne.n	8003364 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d010      	beq.n	8003374 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003362:	e007      	b.n	8003374 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	40000c00 	.word	0x40000c00
 8003394:	40010400 	.word	0x40010400
 8003398:	40014000 	.word	0x40014000
 800339c:	40001800 	.word	0x40001800

080033a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a1a      	ldr	r2, [r3, #32]
 80033ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10f      	bne.n	80033d8 <HAL_TIM_Base_Stop+0x38>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	f240 4344 	movw	r3, #1092	; 0x444
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_TIM_Base_Stop+0x38>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04e      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d01d      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_TIM_Base_Start_IT+0xdc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40001800 	.word	0x40001800

080034d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0202 	mvn.w	r2, #2
 8003504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f999 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f98b 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f99c 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0204 	mvn.w	r2, #4
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f973 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f965 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f976 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d020      	beq.n	80035cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0208 	mvn.w	r2, #8
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2204      	movs	r2, #4
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f94d 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f93f 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f950 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0210 	mvn.w	r2, #16
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2208      	movs	r2, #8
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f927 	bl	8003852 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f919 	bl	800383e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f92a 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00c      	beq.n	800363c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0201 	mvn.w	r2, #1
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fa32 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fae4 	bl	8003c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8fb 	bl	800387a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d007      	beq.n	80036a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0220 	mvn.w	r2, #32
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fab6 	bl	8003c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_ConfigClockSource+0x1c>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0b4      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x186>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003704:	d03e      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0xd4>
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	f200 8087 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x16c>
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003712:	f000 8086 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x172>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371a:	d87f      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b70      	cmp	r3, #112	; 0x70
 800371e:	d01a      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0xa6>
 8003720:	2b70      	cmp	r3, #112	; 0x70
 8003722:	d87b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b60      	cmp	r3, #96	; 0x60
 8003726:	d050      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x11a>
 8003728:	2b60      	cmp	r3, #96	; 0x60
 800372a:	d877      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	2b50      	cmp	r3, #80	; 0x50
 800372e:	d03c      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0xfa>
 8003730:	2b50      	cmp	r3, #80	; 0x50
 8003732:	d873      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d058      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x13a>
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d86f      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d064      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x15a>
 8003740:	2b30      	cmp	r3, #48	; 0x30
 8003742:	d86b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b20      	cmp	r3, #32
 8003746:	d060      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x15a>
 8003748:	2b20      	cmp	r3, #32
 800374a:	d867      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05c      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x15a>
 8003750:	2b10      	cmp	r3, #16
 8003752:	d05a      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x15a>
 8003754:	e062      	b.n	800381c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003766:	f000 f9b9 	bl	8003adc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
      break;
 8003782:	e04f      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003794:	f000 f9a2 	bl	8003adc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a6:	609a      	str	r2, [r3, #8]
      break;
 80037a8:	e03c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	461a      	mov	r2, r3
 80037b8:	f000 f916 	bl	80039e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2150      	movs	r1, #80	; 0x50
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f96f 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 80037c8:	e02c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 f935 	bl	8003a46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2160      	movs	r1, #96	; 0x60
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f95f 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 80037e8:	e01c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 f8f6 	bl	80039e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f94f 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 8003808:	e00c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 f946 	bl	8003aa6 <TIM_ITRx_SetConfig>
      break;
 800381a:	e003      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e000      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a46      	ldr	r2, [pc, #280]	; (80039bc <TIM_Base_SetConfig+0x12c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d00f      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a43      	ldr	r2, [pc, #268]	; (80039c0 <TIM_Base_SetConfig+0x130>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a42      	ldr	r2, [pc, #264]	; (80039c4 <TIM_Base_SetConfig+0x134>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a41      	ldr	r2, [pc, #260]	; (80039c8 <TIM_Base_SetConfig+0x138>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a40      	ldr	r2, [pc, #256]	; (80039cc <TIM_Base_SetConfig+0x13c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a35      	ldr	r2, [pc, #212]	; (80039bc <TIM_Base_SetConfig+0x12c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d027      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d023      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <TIM_Base_SetConfig+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d017      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <TIM_Base_SetConfig+0x140>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <TIM_Base_SetConfig+0x144>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <TIM_Base_SetConfig+0x148>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <TIM_Base_SetConfig+0x14c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <TIM_Base_SetConfig+0x150>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a29      	ldr	r2, [pc, #164]	; (80039e4 <TIM_Base_SetConfig+0x154>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a10      	ldr	r2, [pc, #64]	; (80039bc <TIM_Base_SetConfig+0x12c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0xf8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <TIM_Base_SetConfig+0x13c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  }
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40010000 	.word	0x40010000
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40010400 	.word	0x40010400
 80039d0:	40014000 	.word	0x40014000
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800
 80039dc:	40001800 	.word	0x40001800
 80039e0:	40001c00 	.word	0x40001c00
 80039e4:	40002000 	.word	0x40002000

080039e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 030a 	bic.w	r3, r3, #10
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f023 0210 	bic.w	r2, r3, #16
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	031b      	lsls	r3, r3, #12
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f043 0307 	orr.w	r3, r3, #7
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e05a      	b.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d01d      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40010400 	.word	0x40010400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40001800 	.word	0x40001800

08003c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e042      	b.n	8003cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd fc2a 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f82b 	bl	8003cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce0:	b0c0      	sub	sp, #256	; 0x100
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	68d9      	ldr	r1, [r3, #12]
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	ea40 0301 	orr.w	r3, r0, r1
 8003d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d34:	f021 010c 	bic.w	r1, r1, #12
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d42:	430b      	orrs	r3, r1
 8003d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d56:	6999      	ldr	r1, [r3, #24]
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	ea40 0301 	orr.w	r3, r0, r1
 8003d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b8f      	ldr	r3, [pc, #572]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d005      	beq.n	8003d7c <UART_SetConfig+0xa0>
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b8d      	ldr	r3, [pc, #564]	; (8003fac <UART_SetConfig+0x2d0>)
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d104      	bne.n	8003d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7fe fd76 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8003d80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d84:	e003      	b.n	8003d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d86:	f7fe fd5d 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8003d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d98:	f040 810c 	bne.w	8003fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003da6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	1891      	adds	r1, r2, r2
 8003db4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003db6:	415b      	adcs	r3, r3
 8003db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	eb12 0801 	adds.w	r8, r2, r1
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	eb43 0901 	adc.w	r9, r3, r1
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dde:	4690      	mov	r8, r2
 8003de0:	4699      	mov	r9, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	eb18 0303 	adds.w	r3, r8, r3
 8003de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dec:	462b      	mov	r3, r5
 8003dee:	eb49 0303 	adc.w	r3, r9, r3
 8003df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	18db      	adds	r3, r3, r3
 8003e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e10:	4613      	mov	r3, r2
 8003e12:	eb42 0303 	adc.w	r3, r2, r3
 8003e16:	657b      	str	r3, [r7, #84]	; 0x54
 8003e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e20:	f7fc f9fa 	bl	8000218 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <UART_SetConfig+0x2d4>)
 8003e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	011c      	lsls	r4, r3, #4
 8003e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e54:	4641      	mov	r1, r8
 8003e56:	eb12 0a01 	adds.w	sl, r2, r1
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e74:	4692      	mov	sl, r2
 8003e76:	469b      	mov	fp, r3
 8003e78:	4643      	mov	r3, r8
 8003e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e82:	464b      	mov	r3, r9
 8003e84:	eb4b 0303 	adc.w	r3, fp, r3
 8003e88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	18db      	adds	r3, r3, r3
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
 8003eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eb6:	f7fc f9af 	bl	8000218 <__aeabi_uldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4b3b      	ldr	r3, [pc, #236]	; (8003fb0 <UART_SetConfig+0x2d4>)
 8003ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2264      	movs	r2, #100	; 0x64
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	1acb      	subs	r3, r1, r3
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ed6:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <UART_SetConfig+0x2d4>)
 8003ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ee4:	441c      	add	r4, r3
 8003ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ef8:	4642      	mov	r2, r8
 8003efa:	464b      	mov	r3, r9
 8003efc:	1891      	adds	r1, r2, r2
 8003efe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f00:	415b      	adcs	r3, r3
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f08:	4641      	mov	r1, r8
 8003f0a:	1851      	adds	r1, r2, r1
 8003f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f0e:	4649      	mov	r1, r9
 8003f10:	414b      	adcs	r3, r1
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f20:	4659      	mov	r1, fp
 8003f22:	00cb      	lsls	r3, r1, #3
 8003f24:	4651      	mov	r1, sl
 8003f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	00ca      	lsls	r2, r1, #3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	4642      	mov	r2, r8
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	460a      	mov	r2, r1
 8003f40:	eb42 0303 	adc.w	r3, r2, r3
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	18db      	adds	r3, r3, r3
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f62:	4613      	mov	r3, r2
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f72:	f7fc f951 	bl	8000218 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <UART_SetConfig+0x2d4>)
 8003f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	3332      	adds	r3, #50	; 0x32
 8003f8e:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <UART_SetConfig+0x2d4>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f003 0207 	and.w	r2, r3, #7
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4422      	add	r2, r4
 8003fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fa4:	e106      	b.n	80041b4 <UART_SetConfig+0x4d8>
 8003fa6:	bf00      	nop
 8003fa8:	40011000 	.word	0x40011000
 8003fac:	40011400 	.word	0x40011400
 8003fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fc6:	4642      	mov	r2, r8
 8003fc8:	464b      	mov	r3, r9
 8003fca:	1891      	adds	r1, r2, r2
 8003fcc:	6239      	str	r1, [r7, #32]
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	1854      	adds	r4, r2, r1
 8003fda:	4649      	mov	r1, r9
 8003fdc:	eb43 0501 	adc.w	r5, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	00eb      	lsls	r3, r5, #3
 8003fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fee:	00e2      	lsls	r2, r4, #3
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	4643      	mov	r3, r8
 8003ff6:	18e3      	adds	r3, r4, r3
 8003ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	eb45 0303 	adc.w	r3, r5, r3
 8004002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004022:	4629      	mov	r1, r5
 8004024:	008b      	lsls	r3, r1, #2
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800402c:	4621      	mov	r1, r4
 800402e:	008a      	lsls	r2, r1, #2
 8004030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004034:	f7fc f8f0 	bl	8000218 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4b60      	ldr	r3, [pc, #384]	; (80041c0 <UART_SetConfig+0x4e4>)
 800403e:	fba3 2302 	umull	r2, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	011c      	lsls	r4, r3, #4
 8004046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004050:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004058:	4642      	mov	r2, r8
 800405a:	464b      	mov	r3, r9
 800405c:	1891      	adds	r1, r2, r2
 800405e:	61b9      	str	r1, [r7, #24]
 8004060:	415b      	adcs	r3, r3
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004068:	4641      	mov	r1, r8
 800406a:	1851      	adds	r1, r2, r1
 800406c:	6139      	str	r1, [r7, #16]
 800406e:	4649      	mov	r1, r9
 8004070:	414b      	adcs	r3, r1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004080:	4659      	mov	r1, fp
 8004082:	00cb      	lsls	r3, r1, #3
 8004084:	4651      	mov	r1, sl
 8004086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408a:	4651      	mov	r1, sl
 800408c:	00ca      	lsls	r2, r1, #3
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	4603      	mov	r3, r0
 8004094:	4642      	mov	r2, r8
 8004096:	189b      	adds	r3, r3, r2
 8004098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800409c:	464b      	mov	r3, r9
 800409e:	460a      	mov	r2, r1
 80040a0:	eb42 0303 	adc.w	r3, r2, r3
 80040a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040c0:	4649      	mov	r1, r9
 80040c2:	008b      	lsls	r3, r1, #2
 80040c4:	4641      	mov	r1, r8
 80040c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ca:	4641      	mov	r1, r8
 80040cc:	008a      	lsls	r2, r1, #2
 80040ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040d2:	f7fc f8a1 	bl	8000218 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4611      	mov	r1, r2
 80040dc:	4b38      	ldr	r3, [pc, #224]	; (80041c0 <UART_SetConfig+0x4e4>)
 80040de:	fba3 2301 	umull	r2, r3, r3, r1
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2264      	movs	r2, #100	; 0x64
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	1acb      	subs	r3, r1, r3
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	3332      	adds	r3, #50	; 0x32
 80040f0:	4a33      	ldr	r2, [pc, #204]	; (80041c0 <UART_SetConfig+0x4e4>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fc:	441c      	add	r4, r3
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	673b      	str	r3, [r7, #112]	; 0x70
 8004106:	677a      	str	r2, [r7, #116]	; 0x74
 8004108:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	1891      	adds	r1, r2, r2
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	415b      	adcs	r3, r3
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800411c:	4641      	mov	r1, r8
 800411e:	1851      	adds	r1, r2, r1
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	4649      	mov	r1, r9
 8004124:	414b      	adcs	r3, r1
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004134:	4659      	mov	r1, fp
 8004136:	00cb      	lsls	r3, r1, #3
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413e:	4651      	mov	r1, sl
 8004140:	00ca      	lsls	r2, r1, #3
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	4603      	mov	r3, r0
 8004148:	4642      	mov	r2, r8
 800414a:	189b      	adds	r3, r3, r2
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
 800414e:	464b      	mov	r3, r9
 8004150:	460a      	mov	r2, r1
 8004152:	eb42 0303 	adc.w	r3, r2, r3
 8004156:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	663b      	str	r3, [r7, #96]	; 0x60
 8004162:	667a      	str	r2, [r7, #100]	; 0x64
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004170:	4649      	mov	r1, r9
 8004172:	008b      	lsls	r3, r1, #2
 8004174:	4641      	mov	r1, r8
 8004176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800417a:	4641      	mov	r1, r8
 800417c:	008a      	lsls	r2, r1, #2
 800417e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004182:	f7fc f849 	bl	8000218 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <UART_SetConfig+0x4e4>)
 800418c:	fba3 1302 	umull	r1, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	2164      	movs	r1, #100	; 0x64
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	3332      	adds	r3, #50	; 0x32
 800419e:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <UART_SetConfig+0x4e4>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	f003 020f 	and.w	r2, r3, #15
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4422      	add	r2, r4
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041ba:	46bd      	mov	sp, r7
 80041bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c0:	51eb851f 	.word	0x51eb851f

080041c4 <memset>:
 80041c4:	4402      	add	r2, r0
 80041c6:	4603      	mov	r3, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4d0d      	ldr	r5, [pc, #52]	; (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	; (8004210 <__libc_init_array+0x3c>)
 80041da:	1b64      	subs	r4, r4, r5
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2600      	movs	r6, #0
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4d0b      	ldr	r5, [pc, #44]	; (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	; (8004218 <__libc_init_array+0x44>)
 80041e8:	f000 f820 	bl	800422c <_init>
 80041ec:	1b64      	subs	r4, r4, r5
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2600      	movs	r6, #0
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f855 3b04 	ldr.w	r3, [r5], #4
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	080042fc 	.word	0x080042fc
 8004210:	080042fc 	.word	0x080042fc
 8004214:	080042fc 	.word	0x080042fc
 8004218:	08004300 	.word	0x08004300

0800421c <strcpy>:
 800421c:	4603      	mov	r3, r0
 800421e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004222:	f803 2b01 	strb.w	r2, [r3], #1
 8004226:	2a00      	cmp	r2, #0
 8004228:	d1f9      	bne.n	800421e <strcpy+0x2>
 800422a:	4770      	bx	lr

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
